cmake_minimum_required(VERSION 3.8.0)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(libClaPP_PROJECT_NAME "libClaPP")
project("${libClaPP_PROJECT_NAME}")
include(CTest)
include(CheckCXXCompilerFlag)
include(GNUInstallDirs)
include(cmake/git.cmake)

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
    message(STATUS "Setting build to ${CMAKE_BUILD_TYPE}, because nothing was given.")
endif()
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_CXX_FLAGS_DEBUG "-ggdb -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    list(APPEND libClaPP_TEST_COMPILE_OPTIONS -Wall -Wextra -Wunreachable-code -Wfloat-equal -Wunused-parameter -Werror -pedantic-errors -Wcast-align -Wcast-qual -Wpointer-arith -Wwrite-strings -Wstrict-overflow=1 -Wformat=2 -Wlogical-op -Wduplicated-cond -Wduplicated-branches -Wdouble-promotion -Wold-style-cast -Wshadow -Wwrite-strings -Wuninitialized -Wconversion -Wunused -Wno-missing-braces -Wnarrowing -Wconversion-null -Wuseless-cast -Wsign-conversion -Wrestrict -Wnull-dereference)
    set(libClaPP_COMPILE_OPTIONS ${libClaPP_TEST_COMPILE_OPTIONS})
    list(APPEND libClaPP_COMPILE_OPTIONS -Weffc++)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    list(APPEND libClaPP_COMPILE_OPTIONS -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded -Werror -pedantic-errors)
    set(libClaPP_TEST_COMPILE_OPTIONS ${libClaPP_COMPILE_OPTIONS})
    list(APPEND libClaPP_TEST_COMPILE_OPTION -Wno-global-constructors)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

CHECK_CXX_COMPILER_FLAG("-lstdc++fs" COMPILER_SUPPORTS_FILESYSTEM)
if(COMPILER_SUPPORTS_FILESYSTEM)
    set(libClaPP_FS_LINKER_FLAG "-lstdc++fs")
endif()

option(libClaPP_CLANG_TIDY "Clang-Tidy." Off)
option(libClaPP_BUILD_TESTS "Build tests." Off)
option(libClaPP_BUILD_EXAMPLES "Build examples." Off)
option(libClaPP_BUILD_DOC_CODE "Build doc code." Off)
option(libClaPP_BUILD_COVERAGE "Cretae gcov build." Off)
option(libClaPP_SUBMODULE_DEPENDENCIES "Use dependencies from git submodules." Off)

if(libClaPP_BUILD_COVERAGE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}  -fprofile-arcs -ftest-coverage")
endif()

if(libClaPP_CLANG_TIDY)
    if(NOT CLANG_TIDY)
        find_program(CLANG_TIDY NAMES "clang-tidy" DOC "Path to clang-tidy executable")

        if(NOT CLANG_TIDY)
            message(STATUS "clang-tidy not found.")
        else()
            message(STATUS "found CLANG_TIDY by find_program().")
        endif()
    endif()

    if(CLANG_TIDY)
        message(STATUS "clang-tidy found: ${CLANG_TIDY}")
        set(CLANG_TIDY_ARGS "${CLANG_TIDY}" "-header-filter=src/include;-warnings-as-errors=*;-checks=*,-google-runtime-references,-fuchsia-default-arguments,-fuchsia-overloaded-operator,-cert-dcl50-cpp,-clang-diagnostic-unused-command-line-argument")
    endif()
endif()

find_package(PkgConfig REQUIRED)

set (project_VERSION_MAJOR 0)
set (project_VERSION_MINOR 1)
set (project_VERSION_PATCH_LEVEL 0)
string(TIMESTAMP project_CONFIG_TIME "%Y-%m-%d %H:%M:%S")

set (THIRD_PARTY_DIR "${PROJECT_SOURCE_DIR}/third_party")

add_library(libClaPP_GSL INTERFACE)
if(libClaPP_SUBMODULE_DEPENDENCIES)
    if(NOT TARGET GSL)
        set(GSL_CXX_STANDARD "17" CACHE STRING "Use c++ standard")
        add_subdirectory("${THIRD_PARTY_DIR}/GSL" EXCLUDE_FROM_ALL)
    endif()
    target_link_libraries(libClaPP_GSL INTERFACE GSL)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        target_compile_options(libClaPP_GSL INTERFACE -Wno-error=weak-vtables)
    endif()
    if(libClaPP_BUILD_TESTS)
        if(NOT TARGET gmock_main)
            add_subdirectory("${THIRD_PARTY_DIR}/googletest" EXCLUDE_FROM_ALL)
            add_library(libClaPP_gmock_main INTERFACE)
            target_link_libraries(libClaPP_gmock_main INTERFACE gmock_main)
            if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
                target_compile_options(libClaPP_gmock_main INTERFACE -Wno-error=used-but-marked-unused -Wno-error=covered-switch-default -Wno-error=global-constructors -Wno-gnu-zero-variadic-macro-arguments)
            endif()
        endif()
    endif()
else()
    if(TARGET GSL)
        target_link_libraries(libClaPP_GSL INTERFACE GSL)
    else()
        find_path(libClaPP_GSL_INCLUDE_DIR NAMES gsl_assert PATH_SUFFIXES gsl)
        if(NOT libClaPP_GSL_INCLUDE_DIR)
            message(FATAL_ERROR "Could not find GSL library.")
        endif()
        target_include_directories(libClaPP_GSL INTERFACE ${libClaPP_GSL_INCLUDE_DIR}/..)
    endif()
    if(libClaPP_BUILD_TESTS)
        pkg_check_modules(GMOCK REQUIRED gmock_main>=1.10.0)
        add_library(libClaPP_gmock_main INTERFACE)
        target_include_directories(libClaPP_gmock_main SYSTEM INTERFACE ${GMOCK_INCLUDE_DIRS})
        target_link_libraries(libClaPP_gmock_main INTERFACE ${GMOCK_LIBRARIES})
    endif()
endif()

add_subdirectory(src)

if(libClaPP_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if(libClaPP_BUILD_DOC_CODE)
    add_subdirectory(doc)
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libclapp.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libclapp.pc @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libclapp.pc DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig/")

if(libClaPP_BUILD_TESTS)
    add_subdirectory(tests)
endif()
