stages:
    - build
    - test

variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive

.compile_install_template: &compile_install_definition
    stage: build
    script:
        - SRC_DIR=`pwd`
        - mkdir build
        - cd build
        - cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DlibClaPP_SUBMODULE_DEPENDENCIES=On -DlibClaPP_PEDANTIC_COMPILER_FLAGS=On -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ${SRC_DIR}
        - cmake --build .
        - make install
        - echo -e '#include<clapp/main_parser.h>\n#include<clapp/build_info.h>\n#include<iostream>\nint main (int argc, char *argv[]) {\nstd::cout << clapp::build_info::project_name << " v" << clapp::build_info::version << std::endl;\n}' | ${CXX} `pkg-config --libs --cflags libclapp` -I${SRC_DIR}/third_party/GSL/include/ --std=c++17 -o out -x c++ -

.compile_template: &compile_definition
    stage: build
    script:
        - SRC_DIR=`pwd`
        - mkdir build
        - cd build
        - cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DlibClaPP_PEDANTIC_COMPILER_FLAGS=On -DlibClaPP_BUILD_TESTS=On -DlibClaPP_BUILD_EXAMPLES=On -DlibClaPP_BUILD_DOC_CODE=On -DlibClaPP_BUILD_COVERAGE=On -DlibClaPP_SUBMODULE_DEPENDENCIES=On -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ${ADDITIONAL_OPTION} -G "${GENERATOR}" ${SRC_DIR}
        - cmake --build .
    artifacts:
        paths:
            - build

.compile_clang_tidy_template: &compile_clang_tidy_definition
    stage: build
    script:
        - SRC_DIR=`pwd`
        - mkdir build
        - cd build
        - cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DlibClaPP_PEDANTIC_COMPILER_FLAGS=On -DCLANG_TIDY=${CLANG_TIDY} -DlibClaPP_BUILD_DOC_CODE=On -DlibClaPP_BUILD_TESTS=On -DlibClaPP_BUILD_EXAMPLES=On -DlibClaPP_SUBMODULE_DEPENDENCIES=On -DlibClaPP_BUILD_COVERAGE=On -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DlibClaPP_CLANG_TIDY=On ${SRC_DIR}
        - cmake --build .

.test_gcov_template: &test_gcov_definition
    stage: test
    script:
        - cd build
        - ctest -V -R libclapp_tests
        - gcovr -r ../ -e ../third_party/ -e ../tests/ -e ../examples/ -e doc -e ../doc/ --gcov-executable="${GCOV_EXECUTABLE}"
        - ctest -V -E libclapp_tests
        - cd ../

.test_template: &test_definition
    stage: test
    script:
        - cd build
        - ctest -V
        - cd ../

compile_install_release_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Release"
    tags:
        - g++-9
        - cmake
    <<: *compile_install_definition

compile_install_debug_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Release"
    tags:
        - g++-9
        - cmake
    <<: *compile_install_definition

compile_install_debug_g++8:
    variables:
        CXX: "g++-8"
        CC: "gcc-8"
        BUILD_TYPE: "Debug"
    tags:
        - g++-8
        - cmake
    <<: *compile_install_definition

compile_install_release_g++8:
    variables:
        CXX: "g++-8"
        CC: "gcc-8"
        BUILD_TYPE: "Release"
    tags:
        - g++-8
        - cmake
    <<: *compile_install_definition

compile_install_debug_g++7:
    variables:
        CXX: "g++-7"
        CC: "gcc-7"
        BUILD_TYPE: "Debug"
    tags:
        - g++-7
        - cmake
    <<: *compile_install_definition

compile_install_release_g++7:
    variables:
        CXX: "g++-7"
        CC: "gcc-7"
        BUILD_TYPE: "Release"
    tags:
        - g++-7
        - cmake
    <<: *compile_install_definition

compile_install_debug_clang++7:
    variables:
        CXX: "clang++-7"
        CC: "clang-7"
        BUILD_TYPE: "Debug"
    tags:
        - clang++-7
        - cmake
    <<: *compile_install_definition

compile_install_release_clang++7:
    variables:
        CXX: "clang++-7"
        CC: "clang-7"
        BUILD_TYPE: "Release"
    tags:
        - clang++-7
        - cmake
    <<: *compile_install_definition

compile_install_debug_clang++8:
    variables:
        CXX: "clang++-8"
        CC: "clang-8"
        BUILD_TYPE: "Debug"
    tags:
        - clang++-8
        - cmake
    <<: *compile_install_definition

compile_install_release_clang++8:
    variables:
        CXX: "clang++-8"
        CC: "clang-8"
        BUILD_TYPE: "Release"
    tags:
        - clang++-8
        - cmake
    <<: *compile_install_definition

compile_install_debug_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Debug"
    tags:
        - clang++-9
        - cmake
    <<: *compile_install_definition

compile_install_release_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Release"
    tags:
        - clang++-9
        - cmake
    <<: *compile_install_definition

compile_release_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
    tags:
        - g++-9
        - cmake
    <<: *compile_definition

test_gcov_release_g++9:
    variables:
        GCOV_EXECUTABLE: "gcov-9"
    tags:
        - g++-9
        - cmake
    needs:
        - job: compile_release_g++9
          artifacts: true
    <<: *test_gcov_definition

compile_debug_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - g++-9
        - cmake
    <<: *compile_definition

test_gcov_debug_g++9:
    variables:
        GCOV_EXECUTABLE: "gcov-9"
    tags:
        - g++-9
        - cmake
    needs:
        - job: compile_debug_g++9
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

compile_release_g++8:
    variables:
        CXX: "g++-8"
        CC: "gcc-8"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
    tags:
        - g++-8
        - cmake
    <<: *compile_definition

test_gcov_release_g++8:
    variables:
        GCOV_EXECUTABLE: "gcov-8"
    tags:
        - g++-8
        - cmake
    needs:
        - job: compile_release_g++8
          artifacts: true
    <<: *test_gcov_definition

compile_debug_g++8:
    variables:
        CXX: "g++-8"
        CC: "gcc-8"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - g++-8
        - cmake
    <<: *compile_definition

test_gcov_debug_g++8:
    variables:
        GCOV_EXECUTABLE: "gcov-8"
    tags:
        - g++-8
        - cmake
    needs:
        - job: compile_debug_g++8
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

compile_release_g++7:
    variables:
        CXX: "g++-7"
        CC: "gcc-7"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
    tags:
        - g++-7
        - cmake
    <<: *compile_definition

test_gcov_release_g++7:
    variables:
        GCOV_EXECUTABLE: "gcov-7"
    tags:
        - g++-7
        - cmake
    needs:
        - job: compile_release_g++7
          artifacts: true
    <<: *test_gcov_definition

compile_debug_g++7:
    variables:
        CXX: "g++-7"
        CC: "gcc-7"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - g++-7
        - cmake
    <<: *compile_definition

test_gcov_debug_g++7:
    variables:
        GCOV_EXECUTABLE: "gcov-7"
    tags:
        - g++-7
        - cmake
    needs:
        - job: compile_debug_g++7
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

compile_release_clang++7:
    variables:
        CXX: "clang++-7"
        CC: "clang-7"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-7
        - cmake
    <<: *compile_definition

test_gcov_release_clang++7:
    variables:
        GCOV_EXECUTABLE: "llvm-cov-7 gcov"
    tags:
        - clang++-7
        - cmake
    needs:
        - job: compile_release_clang++7
          artifacts: true
    <<: *test_gcov_definition

compile_debug_clang++7:
    variables:
        CXX: "clang++-7"
        CC: "clang-7"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-7
        - cmake
    <<: *compile_definition

test_gcov_debug_clang++7:
    variables:
        GCOV_EXECUTABLE: "llvm-cov-7 gcov"
    tags:
        - clang++-7
        - cmake
    needs:
        - job: compile_debug_clang++7
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

compile_release_clang++8:
    variables:
        CXX: "clang++-8"
        CC: "clang-8"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-8
        - cmake
    <<: *compile_definition

test_gcov_release_clang++8:
    variables:
        GCOV_EXECUTABLE: "llvm-cov-8 gcov"
    tags:
        - clang++-8
        - cmake
    needs:
        - job: compile_release_clang++8
          artifacts: true
    <<: *test_gcov_definition

compile_debug_clang++8:
    variables:
        CXX: "clang++-8"
        CC: "clang-8"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-8
        - cmake
    <<: *compile_definition

test_gcov_debug_clang++8:
    variables:
        GCOV_EXECUTABLE: "llvm-cov-8 gcov"
    tags:
        - clang++-8
        - cmake
    needs:
        - job: compile_debug_clang++8
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

compile_release_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-9
        - cmake
    <<: *compile_definition

test_gcov_release_clang++9:
    variables:
        GCOV_EXECUTABLE: "llvm-cov-9 gcov"
    tags:
        - clang++-9
        - cmake
    needs:
        - job: compile_release_clang++9
          artifacts: true
    <<: *test_gcov_definition

compile_debug_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-9
        - cmake
    <<: *compile_definition

test_gcov_debug_clang++9:
    variables:
        GCOV_EXECUTABLE: "llvm-cov-9 gcov"
    tags:
        - clang++-9
        - cmake
    needs:
        - job: compile_debug_clang++9
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

compile_debug_clang-tidy-7:
    variables:
        CXX: "clang++-7"
        CC: "clang-7"
        CLANG_TIDY: "clang-tidy-7"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-7
        - cmake
    <<: *compile_clang_tidy_definition

compile_debug_clang-tidy-8:
    variables:
        CXX: "clang++-8"
        CC: "clang-8"
        CLANG_TIDY: "clang-tidy-8"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-8
        - cmake
    <<: *compile_clang_tidy_definition

compile_debug_clang-tidy-9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        CLANG_TIDY: "clang-tidy-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
    tags:
        - clang++-9
        - cmake
    <<: *compile_clang_tidy_definition

compile_install_debug_ninja_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Ninja"
    tags:
        - clang++-9
        - cmake
    <<: *compile_install_definition

compile_install_release_ninja_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Ninja"
    tags:
        - clang++-9
        - cmake
    <<: *compile_install_definition

compile_release_ninja_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Ninja"
    tags:
        - g++-9
        - cmake
    <<: *compile_definition

test_gcov_release_ninja_g++9:
    variables:
        GCOV_EXECUTABLE: "gcov-9"
    tags:
        - g++-9
        - cmake
    needs:
        - job: compile_release_ninja_g++9
          artifacts: true
    <<: *test_gcov_definition

compile_debug_ninja_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Ninja"
    tags:
        - g++-9
        - cmake
    <<: *compile_definition

test_gcov_debug_ninja_g++9:
    variables:
        GCOV_EXECUTABLE: "gcov-9"
    tags:
        - g++-9
        - cmake
    needs:
        - job: compile_debug_ninja_g++9
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_gcov_definition

#TODO: address sanitizer currently gives false positives on arm64
#compile_release_address_sanitizer_g++9:
#    variables:
#        CXX: "g++-9"
#        CC: "gcc-9"
#        BUILD_TYPE: "Release"
#        GENERATOR: "Unix Makefiles"
#        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_ADDRESS=On"
#    tags:
#        - g++-9
#        - cmake
#    <<: *compile_definition
#
#test_release_address_sanitizer_g++9:
#    tags:
#        - g++-9
#        - cmake
#    needs:
#        - job: compile_release_address_sanitizer_g++9
#          artifacts: true
#    <<: *test_definition
#
#compile_debug_address_sanitizer_g++9:
#    variables:
#        CXX: "g++-9"
#        CC: "gcc-9"
#        BUILD_TYPE: "Debug"
#        GENERATOR: "Unix Makefiles"
#        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_ADDRESS=On"
#    tags:
#        - g++-9
#        - cmake
#    <<: *compile_definition
#
#test_debug_address_sanitizer_g++9:
#    tags:
#        - g++-9
#        - cmake
#    needs:
#        - job: compile_debug_address_sanitizer_g++9
#          artifacts: true
#    coverage: '/^TOTAL.*\s+(\d+%)$/'
#    <<: *test_definition

compile_release_undefined_behavior_sanitizer_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=On"
    tags:
        - g++-9
        - cmake
    <<: *compile_definition

test_release_undefined_behavior_sanitizer_g++9:
    tags:
        - g++-9
        - cmake
    needs:
        - job: compile_release_undefined_behavior_sanitizer_g++9
          artifacts: true
    <<: *test_definition

compile_debug_undefined_behavior_sanitizer_g++9:
    variables:
        CXX: "g++-9"
        CC: "gcc-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=On"
    tags:
        - g++-9
        - cmake
    <<: *compile_definition

test_debug_undefined_behavior_sanitizer_g++9:
    tags:
        - g++-9
        - cmake
    needs:
        - job: compile_debug_undefined_behavior_sanitizer_g++9
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_definition

compile_release_address_sanitizer_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_ADDRESS=On"
    tags:
        - clang++-9
        - cmake
    <<: *compile_definition

test_release_address_sanitizer_clang++9:
    tags:
        - clang++-9
        - cmake
    needs:
        - job: compile_release_address_sanitizer_clang++9
          artifacts: true
    <<: *test_definition

compile_debug_address_sanitizer_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_ADDRESS=On"
    tags:
        - clang++-9
        - cmake
    <<: *compile_definition

test_debug_address_sanitizer_clang++9:
    tags:
        - clang++-9
        - cmake
    needs:
        - job: compile_debug_address_sanitizer_clang++9
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_definition

compile_release_undefined_behavior_sanitizer_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Release"
        GENERATOR: "Unix Makefiles"
        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=On"
    tags:
        - clang++-9
        - cmake
    <<: *compile_definition

test_release_undefined_behavior_sanitizer_clang++9:
    tags:
        - clang++-9
        - cmake
    needs:
        - job: compile_release_undefined_behavior_sanitizer_clang++9
          artifacts: true
    <<: *test_definition

compile_debug_undefined_behavior_sanitizer_clang++9:
    variables:
        CXX: "clang++-9"
        CC: "clang-9"
        BUILD_TYPE: "Debug"
        GENERATOR: "Unix Makefiles"
        ADDITIONAL_OPTION: "-DlibClaPP_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=On"
    tags:
        - clang++-9
        - cmake
    <<: *compile_definition

test_debug_undefined_behavior_sanitizer_clang++9:
    tags:
        - clang++-9
        - cmake
    needs:
        - job: compile_debug_undefined_behavior_sanitizer_clang++9
          artifacts: true
    coverage: '/^TOTAL.*\s+(\d+%)$/'
    <<: *test_definition
